source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
mergedAssembleagesTaxon
str(result_filtered)
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
top_orders
result_filtered
c
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
result_filtered
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
# Calculate median richness per order and select top 25
top_orders <- mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(median_richness = median(richness), .groups = 'drop') %>%  # Corrected: Calculate median richness
arrange(desc(median_richness)) %>%
slice_head(n = 100) %>%
pull(order)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
mergedAssembleagesTaxon %>% select(order) %>% distinct()
mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n())
misdatosa<-mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n())
print(misdatos,n=100)
print(misdatosa,n=100)
View(misdatosa)
library(dplyr)
# Calculate counts for each order
order_counts <- mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n()) %>%
ungroup() # Ensure the next operations are not within the group
# Calculate total count
total_count <- sum(order_counts$count)
# Calculate percentage
order_counts <- order_counts %>%
mutate(percentage = (count / total_count) * 100)
# This will add a percentage column to order_counts with the percentage of each order
print(order_counts)
plotStage<-getplotRichnessByDisturbanceAgeGeneral(mergedAssembleagesTaxon)
plotStage<-getplotRichnessByDisturbanceAgeGeneral(mergedAssembleagesTaxon)
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
library(dplyr)
# Calculate counts for each order
order_counts <- mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n()) %>%
ungroup() # Ensure the next operations are not within the group
# Calculate total count
total_count <- sum(order_counts$count)
# Calculate percentage
order_counts <- order_counts %>%
mutate(percentage = (count / total_count) * 100)
# This will add a percentage column to order_counts with the percentage of each order
print(order_counts)
order_counts
order_counts
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
# Calculate counts for each order
order_counts <- mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n()) %>%
ungroup() # Ensure the next operations are not within the group
# Calculate total count
total_count <- sum(order_counts$count)
# Calculate percentage
order_counts <- order_counts %>%
mutate(percentage = (count / total_count) * 100)
# This will add a percentage column to order_counts with the percentage of each order
print(order_counts)
View(order_counts)
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
browser()
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
orders_summary %>% select(median_richness) %>% sort()
orders_summary %>% select(median_richness)
orders_summary %>% select(richness,median_richness)
mergedAssembleagesTaxon$richness
mergedAssembleagesTaxon %>% select(richness, taxon_clean)
orders_summary %>% select(richness,measurement, median_richness)
orders_summary %>% select(richness,meassurement, median_richness)
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
# Identify top 10 orders
top_orders <- head(orders_summary$order, 2)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
# Identify top 10 orders
top_orders <- head(orders_summary$order, 25)
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
runApp()
runApp()
runApp()
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
runApp()
shiny::runApp()
runApp()
runApp()
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
mergedAssembleagesTaxon <- read.csv("inst/filtered_data.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
View(mergedAssembleagesTaxon)
runApp()
runApp()
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
mergedAssembleagesTaxon <- read.csv("inst/filtered_data.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
source("getplotInventoryByClassGeneral.R") #by recovering condition
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$showPlotBtn
input
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
})plotly::ggplotly(plotStage)
plotly::ggplotly(plotStage)
shiny::runApp()
runApp()
shiny::runApp()
# Get memory usage statistics for all objects in the global environment
mem_usage <- obj_size(ls(envir = .GlobalEnv))
# Get memory usage statistics for all objects in the global environment
mem_usage <- obj_size(ls(envir = .GlobalEnv))
library(lobstr)
mem_usage <- obj_size(ls(envir = .GlobalEnv))
# Print memory usage statistics
print(mem_usage)
mem_usage <- obj_size(ls(envir = .GlobalEnv))
# Print memory usage statistics
print(mem_usage)
Browse[2]> mem_usage <- obj_size(ls(envir = .GlobalEnv))
all_objects <- ls(envir = .GlobalEnv)
# Filter out data frames
data_frames <- Filter(function(x) is.data.frame(get(x, envir = .GlobalEnv)), all_objects)
# Get memory usage statistics for data frames
for (df_name in data_frames) {
df <- get(df_name, envir = .GlobalEnv)
mem_usage <- obj_size(df)
print(paste("Memory usage of", df_name, ":", mem_usage, "bytes"))
}
all_objects <- ls(envir = .GlobalEnv)
# Filter out data frames
data_frames <- Filter(function(x) is.data.frame(get(x, envir = .GlobalEnv)), all_objects)
# Get memory usage statistics for data frames
for (df_name in data_frames) {
df <- get(df_name, envir = .GlobalEnv)
mem_usage <- obj_size(df)
print(paste("Memory usage of", df_name, ":", mem_usage, "bytes"))
}
# Get all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Filter out data frames
data_frames <- Filter(function(x) is.data.frame(get(x, envir = .GlobalEnv)), all_objects)
# Get memory usage statistics for data frames
for (df_name in data_frames) {
df <- get(df_name, envir = .GlobalEnv)
mem_usage <- object_size(df)
print(paste("Memory usage of", df_name, ":", mem_usage, "bytes"))
}
# Get all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Filter out data frames
data_frames <- Filter(function(x) is.data.frame(get(x, envir = .GlobalEnv)), all_objects)
install.packages("lobstr")
install.packages("lobstr")
library("lobstr")
shiny::runApp()
print(data_frames)
runApp()
runApp()
gc()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Remove all objects from the global environment
rm(list = ls())
#Garbage memory
gc()
rm(list = ls())
#Garbage memory
gc()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
assemblagesCommon
assemblagesCommon
str(assemblagesCommon)
runApp()
runApp()
assemblagesCommon$error_class
assemblagesCommon
str(assemblagesCommon)
runApp()
assemblagesUnique$error_class
assemblagesUnique$error_class
assemblagesUnique$error_class <- round(assemblagesUnique$error_class, 2)
# Convert character vector to numeric
assemblagesUnique$error_class <- as.numeric(assemblagesUnique$error_class)
# Modify error_class to only 2 decimals
assemblagesUnique$error_class <- round(assemblagesUnique$error_class, 2)
assemblagesUnique$error_class
runApp()
assemblagesUnique$error_class
assemblagesUnique$error_class
assemblages_merged$error_class
assemblages_merged$error_class %>% unique()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tittle_html
tittle_html
tittle_html
runApp()
runApp()
runApp()
runApp()
tittle_html
tittle_html
tittle_html
pivot_data
# Create the HTML tittle
tittle_html <- ""
runApp()
runApp()
runApp()
pivot_data
runApp()
pivot_data
pivot_data
pivot_data <- pivot_data %>% select(taxon_clean, everything())
pivot_data <- pivot_data %>% select(Taxon, everything())
runApp()
pivot_data
runApp()
table_html
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(taxon3)
pivot_data
pivot_data
pivot_data
str(pivot_data)
pivot_data$Taxon <- str_to_title(pivot_data$Taxon)
str(pivot_data)
pivot_data$Taxon <- paste("<i>", pivot_data$Taxon, "</i>", sep = "")
str(pivot_data)
table_html
str(table_html)
print(table_html)
pivot_data
pivot_data$Taxon
# Pivot the data to create the desired dataframe
pivot_data <- summed_data %>%
pivot_wider(names_from = site, values_from = total_measurement, values_fill = 0)
# Rename the taxon_clean column to Taxon
pivot_data <- pivot_data %>% rename(Taxon = taxon_clean)
# Modify the column names to add "Site:" prefix
colnames(pivot_data)[-1] <- paste("Community:", colnames(pivot_data)[-1], sep = " ")
# Format the first column values to italic and capitalize first letter
pivot_data$Taxon <- str_to_title(pivot_data$Taxon)
pivot_data$Taxon <- paste("<i>", pivot_data$Taxon, "</i>", sep = "")
# Convert the dataframe to HTML table format
table_html <- datatable(pivot_data, escape = FALSE, options = list(dom = 't', paging = FALSE))
table_html
table_html
pivot_data$Taxon
pivot_data$Taxon <- str_to_title(pivot_data$Taxon)
pivot_data$Taxon
pivot_data$Taxon <- str_to_sentence(pivot_data$Taxon)
pivot_data$Taxon
# Pivot the data to create the desired dataframe
pivot_data <- summed_data %>%
pivot_wider(names_from = site, values_from = total_measurement, values_fill = 0)
# Rename the taxon_clean column to Taxon
pivot_data <- pivot_data %>% rename(Taxon = taxon_clean)
# Modify the column names to add "Site:" prefix
colnames(pivot_data)[-1] <- paste("Community:", colnames(pivot_data)[-1], sep = " ")
# Format the first column values to italic and capitalize first letter
pivot_data$Taxon <- str_to_title(pivot_data$Taxon)
pivot_data$Taxon <- paste("<i>", pivot_data$Taxon, "</i>", sep = "")
pivot_data$Taxon <- str_to_sentence(pivot_data$Taxon)
pivot_data$Taxon
pivot_data$Taxon <- gsub("^(\\w)(.*)", "\\U\\1\\L\\2", pivot_data$Taxon, perl = TRUE)
pivot_data$Taxon
pivot_data$Taxon <- gsub("^(\\w)(.*)", "\\U\\1\\L\\2", pivot_data$Taxon, perl = TRUE)
pivot_data$Taxon
pivot_data$Taxon <- gsub("(\\b\\w)(.*)", "\\U\\1\\L\\2", pivot_data$Taxon, perl = TRUE)
pivot_data$Taxon
table_html
runApp()
table_html
pivot_data$Taxon
# Rename the taxon_clean column to Taxon
pivot_data <- pivot_data %>% rename(Taxon = taxon_clean)
# Rename the taxon_clean column to Taxon
pivot_data <- pivot_data %>% rename(Taxon = taxon_clean)
runApp()
runApp()
pivot_data$Taxon
str(pivot_data$Taxon)
# Capitalize only the first letter of the first word in each taxon name
pivot_data$Taxon <- gsub("(\\b\\w)(.*)", "\\U\\1\\L\\2", pivot_data$Taxon, perl = TRUE)
# Wrap the taxon names in <i> tags
pivot_data$Taxon <- paste("<i>", pivot_data$Taxon, "</i>", sep = "")
pivot_data$Taxon
# Capitalize only the first letter of the first word in each taxon name
pivot_data$Taxon <- gsub("(\\b\\w)(.*)", "\\U\\1\\L\\2", pivot_data$Taxon, perl = TRUE)
# Wrap the taxon names in <i> tags
pivot_data$Taxon <- paste("<i>", pivot_data$Taxon, "</i>", sep = "")
pivot_data$Taxon
runApp()
pivot_data$Taxon
runApp()
pivot_data$Taxon
# Wrap the taxon names in <i> tags
pivot_data$Taxon <- paste("<i>", pivot_data$Taxon, "</i>", sep = "")
pivot_data$Taxon
runApp()
runApp()
pivot_data
pivot_data
pivot_data
table_html
runApp()
tittle_html
pivot_data
runApp()
matrixDataframe
runApp()
runApp()
shiny::runApp()
runApp()
result
result$mergedByFamily
runApp()
mergedByFamily
runApp()
mergedByFamily
mergedByFamily
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
