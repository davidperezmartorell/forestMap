plotStage
rm(getplotRichnessByFamilyAgeGeneral)
source("getplotRichnessByFamilyAgeGeneral.R") #by recovering condition
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
plotStage
plotStage
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
importantValues
rm(getplotRichnessByFamilyAgeGeneral)
source("getplotRichnessByFamilyAgeGeneral.R") #by recovering condition
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
importantValues
ggplot(importantValues, aes(x = age_group, y = median_measurement, fill = family)) +
stat_slab(aes(thickness = stat(pdf * n)), scale = 0.7) +
stat_dotsinterval(side = "bottom", scale = 0.7, slab_size = NA) +
labs(title = "Mean richness by Family in Each Age Group (Top 75%)", x = "Age Group", y = "Richness") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve x-axis label readability
rm(getplotRichnessByFamilyAgeGeneral)
source("getplotRichnessByFamilyAgeGeneral.R") #by recovering condition
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotRichnessByFamilyAgeGeneral)
source("getplotRichnessByFamilyAgeGeneral.R") #by recovering condition
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotRichnessByFamilyAgeGeneral)
source("getplotRichnessByFamilyAgeGeneral.R") #by recovering condition
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
ggplot(importantValues, aes(x = age_group, y = median_measurement, fill = family)) +
geom_point() +
labs(title = "Mean richness by Family in Each Age Group (Top 75%)", x = "Age Group", y = "Richness") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve x-axis label readability
importantValues
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
importantValues
importantValues$family %>% distinct()
importantValues$family %>% unique()
rm(getplotRichnessByFamilyAgeGeneral)
source("getplotRichnessByFamilyAgeGeneral.R") #by recovering condition
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotRichnessByFamilyAgeGeneral)
source("getplotRichnessByFamilyAgeGeneral.R") #by recovering condition
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotRichnessByFamilyAgeGeneral)
source("getplotRichnessByFamilyAgeGeneral.R") #by recovering condition
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
plotStage
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
getplotRichnessByFamilyAgeGeneral <- function(mergedAssembleagesTaxon) {
browser()
# Group ages into broader categories
result_filtered <- mergedAssembleagesTaxon %>%
mutate(age_group = cut(age,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 75, 100, 200, 300, 400, 500),
include.lowest = TRUE))
# Calculate mean richness for each family across all age groups
familyImportance <- result_filtered %>%
group_by(family) %>%
summarise(overall_mean_richness = mean(richness), .groups = 'drop')
# Determine the 75th percentile threshold for overall family importance
importanceThreshold <- quantile(familyImportance$overall_mean_richness, 0.80, na.rm = TRUE)
# Identify families above the threshold
importantFamilies <- filter(familyImportance, overall_mean_richness > importanceThreshold)$family
# Filter the original dataset for these families
filteredData <- result_filtered %>%
filter(family %in% importantFamilies)
# Calculate mean richness for each combination of age group and important family
medianValuesFamily <- filteredData %>%
group_by(age_group, family) %>%
summarise(median_measurement = mean(richness), .groups = 'drop')
# Plotting the data
plotFamily <- ggplot(medianValuesFamily, aes(x = age_group, y = median_measurement, fill = family)) +
geom_point() +
labs(title = "Mean richness by Important Family in Each Age Group", x = "Age Group", y = "Richness") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(plotFamily)
}
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
medianValuesFamily
medianValuesFamily$family %>% distinct()
medianValuesFamily$family %>% unique()
result_filtered$family %>% unique()
plotStage<-getplotRichnessByFamilyAgeGeneral(mergedAssembleagesTaxon)
plotStage
shiny::runApp()
install.packages("gt")
runApp()
install.packages("DT")
install.packages("plotly")
shiny::runApp()
mergedAssembleagesTaxon <- read.csv("inst/filtered_data.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")mergedAssembleagesTaxon <- read.csv("inst/filtered_data.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
mergedAssembleagesTaxon <- read.csv("inst/filtered_data.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
mergedAssembleagesTaxon$study_common_taxon %>% unique()
count_each_value <- mergedAssembleagesTaxon %>%
group_by(study_common_taxon) %>%
summarise(Count = n())
# Print the result
print(count_each_value)
count_each_value <- mergedAssembleagesTaxon %>%
group_by(study_common_taxon) %>%
summarise(Count = n())
# Print the result
print(count_each_value, n=50)
count_each_value <- mergedAssembleagesTaxon %>%
group_by(study_common_taxon) %>%
summarise(Count = n())
# Print the result
print(count_each_value, n=50)
taxon$taxon_clean
grep('[0-9]', taxon$taxon_clean)
grep('[0-9]', taxon$taxon_ori)
grep('[0-9]', taxon$taxon_ori)
str(taxon)
taxon %>%
filter(grepl('[0-9]', taxon_ori)) %>%
select(taxon_clean, taxon_ori)
str(taxon)
taxon %>%
filter(grepl('[0-9]', taxon_ori)) %>%
select(taxon_clean, taxon_ori, kingdom, phylum, class, order, family, genus, IsGymnosperm)
taxon %>%
filter(grepl('^[0-9]+$', taxon_clean)) %>%
select(taxon_clean, kingdom, phylum, class, order, family, genus, IsGymnosperm)
taxon <- taxon %>%
mutate(across(c(kingdom, phylum, class, order, family, genus),
~ if_else(grepl('^[0-9]+$', taxon_clean), "FUNGI", .)))
write.csv(filtered_data, "inst/tax_cleaned.csv", row.names = FALSE)
write.csv(taxon, "inst/tax_cleaned.csv", row.names = FALSE)
write.csv(taxon, "inst/tax_cleaned2.csv", row.names = FALSE)
taxon
taxon %>%
filter(grepl('[0-9]', taxon_ori)) %>%
select(taxon_clean, taxon_ori)
taxon %>%
filter(grepl('^[0-9]+$', taxon_clean)) %>%
select(taxon_clean, kingdom, phylum, class, order, family, genus, IsGymnosperm)
write.csv(taxon, "inst/tax_cleaned2.csv", row.names = FALSE)
taxon <- read.csv("inst/tax_cleaned.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ".")
#Review fungi values
taxon2 <- taxon %>% mutate(across(c(kingdom, phylum, class, order, family, genus),
if_else(grepl('^[0-9]+$', taxon_clean), "FUNGI", .)))
#Review fungi values
taxon2 <- taxon %>% mutate(across(c(kingdom, phylum, class, order, family, genus),if_else(grepl('^[0-9]+$', taxon_clean), "FUNGI", .)))
taxonstr(taxon)
str(taxon)
#Review fungi values
taxon2 <- taxon %>% mutate(across(c(kingdom, phylum, class, order, family, genus),if_else(grepl('^[0-9]+$', taxon_clean), "FUNGI", .)))
str(taxon )
taxon2 <- taxon %>%
mutate(across(c(kingdom, phylum, class, order, family, genus),
~ if_else(grepl('^[0-9]+$', .data$taxon_clean), "FUNGI", .)))
write.csv2(taxon2, "inst/tax_cleaned2.csv", row.names = FALSE)
shiny::runApp()
# Merge the dataframes based on common columns
merged_data <- merge(taxon, assembleages, by = c("id_study", "id_comm"), all.x = TRUE)
merged_data %>% select(taxon_clean, study_common_taxon)
merged_data %>% select(taxon_clean, study_common_taxon)
merged_data %>%
filter(grepl('^[0-9]+$', taxon_clean)) %>%
select(taxon_clean, study_common_taxon)
merged_data %>%
filter(grepl('^[0-9]+$', taxon_clean)) %>%
select(taxon_clean, study_common_taxon,id_study)
merged_data %>%
filter(id_study == "Plants CU_Gillison et al. 2003_2 3I Plants random plots or quadrats", taxon_clean)) %>%
merged_data %>%
filter(id_study == "Plants CU_Gillison et al. 2003_2 3I Plants random plots or quadrats" & grepl('^[0-9]+$', taxon_clean))
merged_data %>%
filter(id_study == "Plants CU_Gillison et al. 2003_2 3I Plants random plots or quadrats", taxon_clean))
merged_data %>%
filter(id_study == "Plants CU_Gillison et al. 2003_2 3I Plants random plots or quadrats", taxon_clean)
merged_data %>%
filter(id_study == "Plants CU_Gillison et al. 2003_2 3I Plants random plots or quadrats")
merged_data %>%
filter(grepl('^[0-9]+$', taxon_clean)) %>%
select(taxon_clean, study_common_taxon,id_study)
merged_data %>%
filter(grepl('^[0-9]+$', merged_data)) %>%
select(taxon_clean, study_common_taxon,id_study)
merged_data %>% filter(id_study == "Plants CU_Gillison et al. 2003_2 3I Plants random plots or quadrats")
merged_data
merged_data %>%
filter(str_detect(id_study, "Gillison"))
merged_data %>%
filter(str_detect(id_study, "Gillison")) %>% select(id_study)
merged_data %>% filter(id_study == "CU_Gillison et al. 2003_2 3I Plants random plots or quadrats")
study_common_taxonmerged_data %>% filter(id_study == "CU_Gillison et al. 2003_2 3I Plants random plots or quadrats") %>% select (taxon_clean, )
study_common_taxonmerged_data %>% filter(id_study == "CU_Gillison et al. 2003_2 3I Plants random plots or quadrats") %>% select (taxon_clean,study_common_taxon )
study_common_taxonmerged_data %>% filter(id_study == "CU_Gillison et al. 2003_2 3I Plants random plots or quadrats") %>% select (taxon_clean,study_common_taxon )
merged_data %>% filter(id_study == "CU_Gillison et al. 2003_2 3I Plants random plots or quadrats") %>% select (taxon_clean,study_common_taxon )
assembleages %>% filter(id_study == "CU_Gillison et al. 2003_2 3I Plants random plots or quadrats") %>% select (taxon_clean,study_common_taxon )
assembleages %>% filter(id_study == "CU_Gillison et al. 2003_2 3I Plants random plots or quadrats") %>% select (taxon_ori,study_common_taxon )
assembleages %>% filter(id_study == "CU_Gillison et al. 2003_2 3I Plants random plots or quadrats") %>% select (study_common_taxon )
str(assembleages)
assembleages %>% filter(id_study == "CU_Gillison et al. 2003_2 3I Plants random plots or quadrats") %>% select (study_common_taxon )
merged_data %>% filter(study_common_taxon == "bryophyta") %>% select (taxon_clean,study_common_taxon )
merged_data %>% filter(study_common_taxon == "bryophyta")
merged_data %>% filter(study_common_taxon == "bryophyta")
merged_data %>% select(study_common_taxon)
merged_data %>% select(study_common_taxon) %>% unique()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mergedAssembleagesTaxon <- read.csv("inst/filtered_data.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
rm(getplotRichnessCloudAgeGeneralPoints)
source("getplotRichnessCloudAgeGeneralPoints.R") #by recovering condition
plotStage<-getplotRichnessCloudAgeGeneralPoints(mergedAssembleagesTaxon)
plotStage
rm(getplotRichnessCloudAgeGeneralPoints)
source("getplotRichnessCloudAgeGeneralPoints.R") #by recovering condition
plotStage<-getplotRichnessCloudAgeGeneralPoints(mergedAssembleagesTaxon)
plotStage
shiny::runApp()
runApp()
cat("app.R:  Loading libraries\n")
source("loadLibraries.R")
loadLibraries() # Load all libraries
source("loadData.R"); #Load all data
source("versions.R"); #Foot of page with information about creators, contact and versions
source("renderMap.R"); #Function to plot the maps
source("commRelated.R"); #Search info about id_comm Communities related to the id_comm choosen in map
source("studyClicked.R"); #Search info about study clicked in map
source("renderMap.R"); #Function to plot the maps
source("commRelated.R"); #Search info about id_comm Communities related to the id_comm choosen in map
source("studyClicked.R"); #Search info about study clicked in map
source("getRichnessPlot.R"); #Plot graphics abund and richness by age
source("speciesStudyMatrix.R"); #Create table with all species related to clicked study
source("givemeGbifInfo.R"); #Search info in GBIB about each specie
source("givemeAbundance.R"); #Returns abundance from assembleages ad in_comm for each taxon_clean
source("filterDataByIdstudy.R"); #Returns data from taxon and assembleages filtered by id_study to plot values
source("givemeAbundance.R"); #Returns abundance from assembleages ad in_comm for each taxon_clean
source("givemeGbifInfo.R"); #Search info in GBIB about each specie
source("studyClicked.R"); #Search info about study clicked in map
source("getRichnessPlot.R"); #Plot graphics abund and richness by age
source("speciesStudyMatrix.R"); #Create table with all species related to clicked study
source("givemeGbifInfo.R"); #Search info in GBIB about each specie
source("givemeAbundance.R"); #Returns abundance from assembleages ad in_comm for each taxon_clean
source("givemeGbifInfo.R"); #Search info in GBIB about each specie
source("filterDataByIdstudy.R"); #Returns data from taxon and assembleages filtered by id_study to plot values
source("getInventoryPlot.R"); #Returns plot with inventory in that study and abundancy by family
source("filterDataByIdstudy.R"); #Returns data from taxon and assembleages filtered by id_study to plot values
source("getInventoryPlot.R"); #Returns plot with inventory in that study and abundancy by family
source("getInventoryPlotByClass.R"); #Returns plot with inventory in that study and abundancy by class
source("getInventoryPlotByOrder.R"); #Returns plot with inventory in that study and abundancy by Order
source("mergeAssembleagesTaxon.R"); #Returns taxon and assembleages merged. it's needed to create general plots- Furthermore, it's filtered 5% values in the top
source("getplotInventoryByOrderGeneral.R"); #Returns plot with inventory all the database by Order
source("getplotInventoryByClassGeneral.R"); #Returns plot with inventory all the database by Class
source("getplotInventoryByStageGeneral.R"); #Returns plot with inventory all the database by Stage
source("getplotRichnessCloudAgeGeneral.R"); #Returns plot with all the database by age nd with boxplots
source("getplotRichnessCloudAgeGeneralPoints.R"); #Returns plot with all the database by age nd with points and
source("getplotInventoryByStudyCommonTaxonGeneral.R"); #Returns plot with inventory all the database by study common taxon
source("getplotRichnessByDisturbanceAgeGeneral.R"); #Returns taxon and assembleages merged and filtered 5% values in the top
source("getplotRecoveringConditionGeneral.R"); #Returns Plot with relation recovering condition versus age for all species
#Load data
cat("app.R:  Loading all data\n")
data <- loadData()
runApp()
mergedAssembleagesTaxon <- read.csv("inst/filtered_data.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
ggplotly(plotStage)
plotStage
View(getplotInventoryByClassGeneral)
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
mergedAssembleagesTaxon
str(result_filtered)
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
top_orders
result_filtered
c
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
result_filtered
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
# Calculate median richness per order and select top 25
top_orders <- mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(median_richness = median(richness), .groups = 'drop') %>%  # Corrected: Calculate median richness
arrange(desc(median_richness)) %>%
slice_head(n = 100) %>%
pull(order)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
mergedAssembleagesTaxon %>% select(order) %>% distinct()
mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n())
misdatosa<-mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n())
print(misdatos,n=100)
print(misdatosa,n=100)
View(misdatosa)
library(dplyr)
# Calculate counts for each order
order_counts <- mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n()) %>%
ungroup() # Ensure the next operations are not within the group
# Calculate total count
total_count <- sum(order_counts$count)
# Calculate percentage
order_counts <- order_counts %>%
mutate(percentage = (count / total_count) * 100)
# This will add a percentage column to order_counts with the percentage of each order
print(order_counts)
plotStage<-getplotRichnessByDisturbanceAgeGeneral(mergedAssembleagesTaxon)
plotStage<-getplotRichnessByDisturbanceAgeGeneral(mergedAssembleagesTaxon)
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
library(dplyr)
# Calculate counts for each order
order_counts <- mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n()) %>%
ungroup() # Ensure the next operations are not within the group
# Calculate total count
total_count <- sum(order_counts$count)
# Calculate percentage
order_counts <- order_counts %>%
mutate(percentage = (count / total_count) * 100)
# This will add a percentage column to order_counts with the percentage of each order
print(order_counts)
order_counts
order_counts
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
# Calculate counts for each order
order_counts <- mergedAssembleagesTaxon %>%
group_by(order) %>%
summarise(count = n()) %>%
ungroup() # Ensure the next operations are not within the group
# Calculate total count
total_count <- sum(order_counts$count)
# Calculate percentage
order_counts <- order_counts %>%
mutate(percentage = (count / total_count) * 100)
# This will add a percentage column to order_counts with the percentage of each order
print(order_counts)
View(order_counts)
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
browser()
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
orders_summary %>% select(median_richness) %>% sort()
orders_summary %>% select(median_richness)
orders_summary %>% select(richness,median_richness)
mergedAssembleagesTaxon$richness
mergedAssembleagesTaxon %>% select(richness, taxon_clean)
orders_summary %>% select(richness,measurement, median_richness)
orders_summary %>% select(richness,meassurement, median_richness)
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
# Identify top 10 orders
top_orders <- head(orders_summary$order, 2)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
# Identify top 10 orders
top_orders <- head(orders_summary$order, 25)
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
runApp()
runApp()
runApp()
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
runApp()
shiny::runApp()
runApp()
runApp()
rm(getplotInventoryByOrderGeneral)
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
mergedAssembleagesTaxon <- read.csv("inst/filtered_data.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
source("getplotInventoryByOrderGeneral.R") #by recovering condition
plotStage<-getplotInventoryByOrderGeneral(mergedAssembleagesTaxon)
plotStage
View(mergedAssembleagesTaxon)
runApp()
runApp()
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
mergedAssembleagesTaxon <- read.csv("inst/filtered_data.csv", stringsAsFactors = FALSE, sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
rm(getplotInventoryByClassGeneral)
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
source("getplotInventoryByClassGeneral.R") #by recovering condition
rm(getplotInventoryByClassGeneral)
source("getplotInventoryByClassGeneral.R") #by recovering condition
plotStage<-getplotInventoryByClassGeneral(mergedAssembleagesTaxon)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$showPlotBtn
input
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
})plotly::ggplotly(plotStage)
plotly::ggplotly(plotStage)
shiny::runApp()
runApp()
