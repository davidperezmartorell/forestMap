"Country: ", country, "<br>",
"Year of study: ", study_year, "<br>",
"Name of Study group: ", id_study, "<br>",
"Number of studies: ", count_study, "<br>",
"Stage: ", stage, "<br>",
"Study Common Taxon Clean: ", study_common_taxon_clean
),
group = "Disturbance Age Clean Markers"
) %>%
addLegend(
position = "bottomright",
colors = c("pink", "darkblue", "brown", "darkred", "white"),
labels = c("Burning", "Mining", "Logging", "Cultivation", "Others"),
title = "Disturbance Age Clean"
)
# Add layer control
map <- map %>%
addLayersControl(
baseGroups = c("Base Map"),
overlayGroups = c("Stage Markers", "Disturbance Age Clean Markers"),
options = layersControlOptions(collapsed = FALSE)
)
map <- map %>%
setView(lng = mean(summary_data$exact_long, na.rm = TRUE),
lat = mean(summary_data$exact_lat, na.rm = TRUE),
zoom = 3)
map
# Define colors for each stage category
stage_colors <- c("recovering" = "green", "reference" = "blue", "disturbed" = "red", "protection" = "yellow", "others" = "gray")
# Create a leaflet map with marker clusters
map <- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addPolygons(
data = world,
fillColor = NA,
color = "black",
weight = 1,
group = "Base Map"
)
# Add circle markers for stage
map <- map %>%
addCircleMarkers(
data = summary_data,  # Use summary_data directly
lat = ~exact_lat,
lng = ~exact_long,
radius = 10,
fillOpacity = 1,
color = "black",
fillColor = ~stage_colors[stage],  # Use stage_colors directly
popup = ~paste(
"Country: ", country, "<br>",
"Year of study: ", study_year, "<br>",
"Name of Study group: ", id_study, "<br>",
"Number of studies: ", count_study, "<br>",
"Stage: ", stage, "<br>",
"Study Common Taxon Clean: ", study_common_taxon_clean
),
group = "Stage Markers"
) %>%
addLegend(
position = "bottomright",
colors = stage_colors,
labels = names(stage_colors),
title = "Stage"
)
# Add regular circle markers for disturbance1_age_clean
map <- map %>%
addCircleMarkers(
data = summary_data,  # Use summary_data directly
lat = ~exact_lat,
lng = ~exact_long,
radius = 5,  # Set radius to 5 for smaller circles
fillOpacity = 0.7,
color = "black",
fillColor = ~case_when(
disturbance1_age_clean %in% c("burning", "burning/logging/farming", "burning/farming") ~ "pink",
disturbance1_age_clean == "mining" ~ "darkblue",
disturbance1_age_clean %in% c("logging", "logging/farming", "forest uses", "forest uses/logging") ~ "brown",
disturbance1_age_clean %in% c("cultivation", "animal farming", "plantation", "plantation/logging") ~ "white",
TRUE ~ "darkred"
),
popup = ~paste(
"Country: ", country, "<br>",
"Year of study: ", study_year, "<br>",
"Name of Study group: ", id_study, "<br>",
"Number of studies: ", count_study, "<br>",
"Stage: ", stage, "<br>",
"Study Common Taxon Clean: ", study_common_taxon_clean
),
group = "Disturbance Age Clean Markers"
) %>%
addLegend(
position = "bottomright",
colors = c("pink", "darkblue", "brown", "darkred", "white"),
labels = c("Burning", "Mining", "Logging", "Cultivation", "Others"),
title = "Disturbance Age Clean"
)
# Add layer control
map <- map %>%
addLayersControl(
baseGroups = c("Base Map"),
overlayGroups = c("Stage Markers", "Disturbance Age Clean Markers"),
options = layersControlOptions(collapsed = FALSE)
)
map <- map %>%
setView(lng = mean(summary_data$exact_long, na.rm = TRUE),
lat = mean(summary_data$exact_lat, na.rm = TRUE),
zoom = 3)
map
assembleages <- read.csv("inst/comm_nodist_plants.csv", sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
assembleages_filtered <- dplyr::select(assembleages,"id","id_comm", "id_study", "study_year", "stage", "study_common_taxon_clean", "taxon_level", "exact_lat", "exact_long", "country", "disturbance1_age_clean")
assembleages_filtered <- assembleages_filtered %>% unique()
inputData<-assembleages_filtered
library("dplyr")
library("leaflet")
library("sf")
library("rnaturalearth")
summary_data <- inputData %>%
group_by(id, country, exact_lat, exact_long, study_year, id_study) %>%
summarise(
count_study = n_distinct(id_study),
stage = first(stage),
disturbance1_age_clean = first(disturbance1_age_clean),
study_common_taxon_clean = first(study_common_taxon_clean),
.groups = 'drop'
) %>%
ungroup()
# Convert 'exact_lat' and 'exact_long' columns to numeric, handling non-numeric values
summary_data$exact_lat <- as.numeric(summary_data$exact_lat)
summary_data$exact_long <- as.numeric(summary_data$exact_long)
# Handle any NAs or non-numeric values
summary_data$exact_lat[is.na(summary_data$exact_lat) | !is.numeric(summary_data$exact_lat)] <- NA
summary_data$exact_long[is.na(summary_data$exact_long) | !is.numeric(summary_data$exact_long)] <- NA
# Load world countries data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Set CRS to WGS84
world <- st_set_crs(world, 4326)  # 4326 is the EPSG code for WGS84
# Mutate inputData based on disturbance1_age_clean
summary_data <- summary_data %>%
mutate(disturbance_category = case_when(
disturbance1_age_clean %in% c("burning", "burning/logging/farming", "burning/farming") ~ "burning",
disturbance1_age_clean == "mining" ~ "mining",
disturbance1_age_clean %in% c("logging", "logging/farming", "forest uses", "forest uses/logging") ~ "forest",
disturbance1_age_clean %in% c("cultivation", "animal farming", "plantation", "plantation/logging") ~ "cultivation",
TRUE ~ "others"
))
# Define colors for each disturbance category
disturbance1_age_clean_colors <- c("burning" = "red","mining" = "blue","forest" = "green","cultivation" = "orange", "others" = "gray" )
# Define colors for each stage category
stage_colors <- c("recovering" = "green","reference" = "blue","disturbed" = "red",  "protection" = "yellow","0" = "gray")
# Create a leaflet map with marker clusters
map <- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addPolygons(
data = world,
fillColor = NA,
color = "black",
weight = 1,
group = "Base Map"
)
# Add circle markers for stage
map <- map %>%
addCircleMarkers(
data = summary_data,  # Use summary_data directly
lat = ~exact_lat,
lng = ~exact_long,
radius = 5,
fillOpacity = 1,
color = "black",
fillColor = ~case_when(
stage == "recovering" ~ "green",
stage == "reference" ~ "blue",
stage == "disturbed" ~ "red",
stage == "protection" ~ "yellow",
TRUE ~ "gray"
),
popup = ~paste(
"Country: ", country, "<br>",
"Year of study: ", study_year, "<br>",
"Name of Study group: ", id_study, "<br>",
"Number of studies: ", count_study, "<br>",
"Stage: ", stage, "<br>",
"Study Common Taxon Clean: ", study_common_taxon_clean
),
group = "Stage Markers"
) %>%
addLegend(
position = "bottomright",
colors = c("green", "blue", "red", "yellow", "gray"),
labels = c("Recovering", "Reference", "Disturbed", "Protection", "Others"),
title = "Stage"
)
# Add regular circle markers for disturbance1_age_clean
map <- map %>%
addCircleMarkers(
data = summary_data,  # Use summary_data directly
lat = ~exact_lat,
lng = ~exact_long,
radius = 5,  # Set radius to 5 for smaller circles
fillOpacity = 0.7,
color = "black",
fillColor = ~case_when(
disturbance1_age_clean %in% c("burning", "burning/logging/farming", "burning/farming") ~ "pink",
disturbance1_age_clean == "mining" ~ "darkblue",
disturbance1_age_clean %in% c("logging", "logging/farming", "forest uses", "forest uses/logging") ~ "brown",
disturbance1_age_clean %in% c("cultivation", "animal farming", "plantation", "plantation/logging") ~ "white",
TRUE ~ "darkred"
),
popup = ~paste(
"Country: ", country, "<br>",
"Year of study: ", study_year, "<br>",
"Name of Study group: ", id_study, "<br>",
"Number of studies: ", count_study, "<br>",
"Stage: ", stage, "<br>",
"Study Common Taxon Clean: ", study_common_taxon_clean
),
group = "Disturbance Age Clean Markers"
) %>%
addLegend(
position = "bottomright",
colors = c("pink", "darkblue", "brown", "darkred", "white"),
labels = c("Burning", "Mining", "Logging", "Cultivation", "Others"),
title = "Disturbance Age Clean"
)
# Add layer control
map <- map %>%
addLayersControl(
baseGroups = c("Base Map"),
overlayGroups = c("Stage Markers", "Disturbance Age Clean Markers"),
options = layersControlOptions(collapsed = FALSE)
)
map <- map %>%
setView(lng = mean(summary_data$exact_long, na.rm = TRUE),
lat = mean(summary_data$exact_lat, na.rm = TRUE),
zoom = 3)
map
# Add circle markers for stage
map <- map %>%
addCircleMarkers(
data = summary_data,  # Use summary_data directly
lat = ~exact_lat,
lng = ~exact_long,
radius = 10,
fillOpacity = 1,
color = "black",
fillColor = ~case_when(
stage == "recovering" ~ "green",
stage == "reference" ~ "blue",
stage == "disturbed" ~ "red",
stage == "protection" ~ "yellow",
TRUE ~ "gray"
),
popup = ~paste(
"Country: ", country, "<br>",
"Year of study: ", study_year, "<br>",
"Name of Study group: ", id_study, "<br>",
"Number of studies: ", count_study, "<br>",
"Stage: ", stage, "<br>",
"Study Common Taxon Clean: ", study_common_taxon_clean
),
group = "Stage Markers"
) %>%
addLegend(
position = "bottomright",
colors = c("green", "blue", "red", "yellow", "gray"),
labels = c("Recovering", "Reference", "Disturbed", "Protection", "Others"),
title = "Stage"
)
# Add regular circle markers for disturbance1_age_clean
map <- map %>%
addCircleMarkers(
data = summary_data,  # Use summary_data directly
lat = ~exact_lat,
lng = ~exact_long,
radius = 10,  # Set radius to 5 for smaller circles
fillOpacity = 0.7,
color = "black",
fillColor = ~case_when(
disturbance1_age_clean %in% c("burning", "burning/logging/farming", "burning/farming") ~ "pink",
disturbance1_age_clean == "mining" ~ "darkblue",
disturbance1_age_clean %in% c("logging", "logging/farming", "forest uses", "forest uses/logging") ~ "brown",
disturbance1_age_clean %in% c("cultivation", "animal farming", "plantation", "plantation/logging") ~ "white",
TRUE ~ "darkred"
),
popup = ~paste(
"Country: ", country, "<br>",
"Year of study: ", study_year, "<br>",
"Name of Study group: ", id_study, "<br>",
"Number of studies: ", count_study, "<br>",
"Stage: ", stage, "<br>",
"Study Common Taxon Clean: ", study_common_taxon_clean
),
group = "Disturbance Age Clean Markers"
) %>%
addLegend(
position = "bottomright",
colors = c("pink", "darkblue", "brown", "darkred", "white"),
labels = c("Burning", "Mining", "Logging", "Cultivation", "Others"),
title = "Disturbance Age Clean"
)
# Add layer control
map <- map %>%
addLayersControl(
baseGroups = c("Base Map"),
overlayGroups = c("Stage Markers", "Disturbance Age Clean Markers"),
options = layersControlOptions(collapsed = FALSE)
)
map <- map %>%
setView(lng = mean(summary_data$exact_long, na.rm = TRUE),
lat = mean(summary_data$exact_lat, na.rm = TRUE),
zoom = 3)
map
summary_data$disturbance1_age_clean
summary_data$disturbance1_age_clean %>% distinct()
summary_data$disturbance1_age_clean %>% unque()
summary_data$disturbance1_age_clean %>% unique()
summary_data$stage %>% unique()
summary_data$stage %>% filter (stage=="0")
summary_data <- filter(summary_data, stage == "0")
summary_data$stage %>% unique()
#Code to test function
assembleages <- read.csv("inst/comm_nodist_plants.csv", sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
assembleages_filtered <- dplyr::select(assembleages,"id","id_comm", "id_study", "study_year", "stage", "study_common_taxon_clean", "taxon_level", "exact_lat", "exact_long", "country", "disturbance1_age_clean")
assembleages_filtered <- assembleages_filtered %>% unique()
inputData<-assembleages_filtered
library("dplyr")
library("leaflet")
library("sf")
library("rnaturalearth")
summary_data <- inputData %>%
group_by(id, country, exact_lat, exact_long, study_year, id_study) %>%
summarise(
count_study = n_distinct(id_study),
stage = first(stage),
disturbance1_age_clean = first(disturbance1_age_clean),
study_common_taxon_clean = first(study_common_taxon_clean),
.groups = 'drop'
) %>%
ungroup()
# Convert 'exact_lat' and 'exact_long' columns to numeric, handling non-numeric values
summary_data$exact_lat <- as.numeric(summary_data$exact_lat)
summary_data$exact_long <- as.numeric(summary_data$exact_long)
# Handle any NAs or non-numeric values
summary_data$exact_lat[is.na(summary_data$exact_lat) | !is.numeric(summary_data$exact_lat)] <- NA
summary_data$exact_long[is.na(summary_data$exact_long) | !is.numeric(summary_data$exact_long)] <- NA
summary_data <- filter(summary_data, stage != "0")
summary_data$stage %>% unique()
assembleages <- read.csv("inst/comm_nodist_plants.csv", sep = ";", header = TRUE, fileEncoding = "latin1", dec = ",")
assembleages_filtered <- dplyr::select(assembleages,"id","id_comm", "id_study", "study_year", "stage", "study_common_taxon_clean", "taxon_level", "exact_lat", "exact_long", "country", "disturbance1_age_clean")
assembleages_filtered <- assembleages_filtered %>% unique()
inputData<-assembleages_filtered
library("dplyr")
library("leaflet")
library("sf")
library("rnaturalearth")
summary_data <- inputData %>%
group_by(id, country, exact_lat, exact_long, study_year, id_study) %>%
summarise(
count_study = n_distinct(id_study),
stage = first(stage),
disturbance1_age_clean = first(disturbance1_age_clean),
study_common_taxon_clean = first(study_common_taxon_clean),
.groups = 'drop'
) %>%
ungroup()
# Convert 'exact_lat' and 'exact_long' columns to numeric, handling non-numeric values
summary_data$exact_lat <- as.numeric(summary_data$exact_lat)
summary_data$exact_long <- as.numeric(summary_data$exact_long)
# Handle any NAs or non-numeric values
summary_data$exact_lat[is.na(summary_data$exact_lat) | !is.numeric(summary_data$exact_lat)] <- NA
summary_data$exact_long[is.na(summary_data$exact_long) | !is.numeric(summary_data$exact_long)] <- NA
summary_data <- filter(summary_data, stage != "0")
# Load world countries data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Set CRS to WGS84
world <- st_set_crs(world, 4326)  # 4326 is the EPSG code for WGS84
# Mutate inputData based on disturbance1_age_clean
summary_data <- summary_data %>%
mutate(disturbance_category = case_when(
disturbance1_age_clean %in% c("burning", "burning/logging/farming", "burning/farming") ~ "burning",
disturbance1_age_clean == "mining" ~ "mining",
disturbance1_age_clean %in% c("logging", "logging/farming", "forest uses", "forest uses/logging") ~ "forest",
disturbance1_age_clean %in% c("cultivation", "animal farming","farming", "plantation", "plantation/logging") ~ "cultivation",
TRUE ~ "none"
))
# Define colors for each disturbance category
disturbance1_age_clean_colors <- c("burning" = "red","mining" = "blue","forest" = "green","cultivation" = "orange", "none" = "gray" )
# Define colors for each stage category
stage_colors <- c("recovering" = "green","reference" = "blue","disturbed" = "darkred",  "protection" = "yellow")
# Create a leaflet map with marker clusters
map <- leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addPolygons(
data = world,
fillColor = NA,
color = "black",
weight = 1,
group = "Base Map"
)
# Add circle markers for stage
map <- map %>%
addCircleMarkers(
data = summary_data,  # Use summary_data directly
lat = ~exact_lat,
lng = ~exact_long,
radius = 10,
fillOpacity = 1,
color = "black",
fillColor = ~case_when(
stage == "recovering" ~ "green",
stage == "reference" ~ "blue",
stage == "disturbed" ~ "darkred",
stage == "protection" ~ "yellow"
),
popup = ~paste(
"Country: ", country, "<br>",
"Year of study: ", study_year, "<br>",
"Name of Study group: ", id_study, "<br>",
"Number of studies: ", count_study, "<br>",
"Stage: ", stage, "<br>",
"Study Common Taxon Clean: ", study_common_taxon_clean
),
group = "Stage Markers"
) %>%
addLegend(
position = "bottomright",
colors = c("green", "blue", "darkred", "yellow"),
labels = c("Recovering", "Reference", "Disturbed", "Protection"),
title = "Stage"
)
# Add regular circle markers for disturbance1_age_clean
map <- map %>%
addCircleMarkers(
data = summary_data,  # Use summary_data directly
lat = ~exact_lat,
lng = ~exact_long,
radius = 10,  # Set radius to 5 for smaller circles
fillOpacity = 0.7,
color = "black",
fillColor = ~case_when(
disturbance1_age_clean %in% c("burning", "burning/logging/farming", "burning/farming") ~ "pink",
disturbance1_age_clean == "mining" ~ "darkblue",
disturbance1_age_clean %in% c("logging", "logging/farming", "forest uses", "forest uses/logging") ~ "brown",
disturbance1_age_clean %in% c("cultivation", "animal farming","farming", "plantation", "plantation/logging") ~ "white",
TRUE ~ "darkred"
),
popup = ~paste(
"Country: ", country, "<br>",
"Year of study: ", study_year, "<br>",
"Name of Study group: ", id_study, "<br>",
"Number of studies: ", count_study, "<br>",
"Stage: ", stage, "<br>",
"Study Common Taxon Clean: ", study_common_taxon_clean
),
group = "Disturbance Age Clean Markers"
) %>%
addLegend(
position = "bottomright",
colors = c("pink", "darkblue", "brown", "white", "darkred"),
labels = c("Burning", "Mining", "Logging", "Cultivation", "Others"),
title = "Disturbance Age Clean"
)
# Add layer control
map <- map %>%
addLayersControl(
baseGroups = c("Base Map"),
overlayGroups = c("Stage Markers", "Disturbance Age Clean Markers"),
options = layersControlOptions(collapsed = FALSE)
)
map <- map %>%
setView(lng = mean(summary_data$exact_long, na.rm = TRUE),
lat = mean(summary_data$exact_lat, na.rm = TRUE),
zoom = 3)
map
runApp()
runApp()
runApp()
browser()
runApp()
runApp()
input
input$map_marker_click
input$map_groups
input$map_marker_click
input$str(input)
input$str(inputData)
input
str(input)
runApp()
input
input$map_marker_click
runApp()
shiny::runApp()
mergedAssembleagesTaxon
runApp()
result_filtered <- filtered_data %>%
filter(disturbance1_age_clean != "") %>%
filter(disturbance1_age_clean != "none") %>%
mutate(combined_disturbance = ifelse(disturbance1_age_clean %in% c("burning", "burning/logging/farming", "burning/farming"), "burning",
ifelse(disturbance1_age_clean == "mining", "mining",
ifelse(disturbance1_age_clean %in% c("logging", "logging/farming", "forest uses", "forest uses/logging"), "forest",
ifelse(disturbance1_age_clean %in% c("cultivation", "animal farming", "plantation", "plantation/logging"), "cultivation", "others")))))
runApp()
library("rsconnect")
rsconnect::setAccountInfo(name='qm0lyl-david-perez0martorell',
token='87AC8A1130D5FD47745C6FC5E83B727A',
secret='NR6GRM3SYy+DNusOTqIBvVaVXJ0NfKYOudvOyNKu')
rsconnect::deployApp("c:/Users/piura/Desktop/forestMap/")
rsconnect::setAccountInfo(name='qm0lyl-david-perez0martorell',
token='87AC8A1130D5FD47745C6FC5E83B727A',
secret='NR6GRM3SYy+DNusOTqIBvVaVXJ0NfKYOudvOyNKu')
rsconnect::deployApp("c:/Users/piura/Desktop/forestMap/")
